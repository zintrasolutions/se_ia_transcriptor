const { app, BrowserWindow, Menu, dialog, shell } = require('electron');
const path = require('path');
const { spawn } = require('child_process');
const fs = require('fs');

// Garder une r√©f√©rence globale de l'objet window
let mainWindow;
let serverProcess;

// D√©marrer le serveur Node.js
function startServer() {
    console.log('üöÄ D√©marrage du serveur Node.js...');
    
    // Nettoyer les dossiers au d√©marrage
    const foldersToClean = ['subtitles', 'output', 'uploads'];
    foldersToClean.forEach(folder => {
        const folderPath = path.join(__dirname, folder);
        if (fs.existsSync(folderPath)) {
            try {
                fs.rmSync(folderPath, { recursive: true, force: true });
                fs.mkdirSync(folderPath, { recursive: true });
                console.log(`‚úÖ Dossier ${folder} nettoy√©`);
            } catch (error) {
                console.error(`‚ùå Erreur lors du nettoyage de ${folder}:`, error);
            }
        } else {
            try {
                fs.mkdirSync(folderPath, { recursive: true });
                console.log(`‚úÖ Dossier ${folder} cr√©√©`);
            } catch (error) {
                console.error(`‚ùå Erreur lors de la cr√©ation de ${folder}:`, error);
            }
        }
    });

    // D√©marrer le serveur
    serverProcess = spawn('node', ['server.js'], {
        cwd: __dirname,
        stdio: 'pipe'
    });

    serverProcess.stdout.on('data', (data) => {
        console.log('üì° Serveur:', data.toString().trim());
    });

    serverProcess.stderr.on('data', (data) => {
        console.error('‚ùå Erreur serveur:', data.toString().trim());
    });

    serverProcess.on('close', (code) => {
        console.log('üî¥ Serveur ferm√© avec le code:', code);
    });

    serverProcess.on('error', (error) => {
        console.error('‚ùå Erreur lors du d√©marrage du serveur:', error);
        dialog.showErrorBox('Erreur serveur', `Impossible de d√©marrer le serveur: ${error.message}`);
    });
}

// Cr√©er la fen√™tre principale
function createWindow() {
    console.log('ü™ü Cr√©ation de la fen√™tre principale...');
    
    // Cr√©er la fen√™tre du navigateur
    mainWindow = new BrowserWindow({
        width: 1200,
        height: 800,
        show: true,
        center: true,
        resizable: true,
        minimizable: true,
        maximizable: true,
        fullscreenable: true,
        autoHideMenuBar: false,
        webPreferences: {
            nodeIntegration: false,
            contextIsolation: true,
            webSecurity: false,
            allowRunningInsecureContent: true
        },
        icon: path.join(__dirname, 'assets', 'icon.icns')
    });

    // Charger l'interface
    console.log('üåê Chargement de l\'interface...');
    mainWindow.loadURL('http://localhost:3001');

    // G√©rer les erreurs de chargement
    mainWindow.webContents.on('did-fail-load', (event, errorCode, errorDescription, validatedURL) => {
        console.error('‚ùå Erreur de chargement:', errorCode, errorDescription, validatedURL);
        dialog.showErrorBox('Erreur de chargement', `Impossible de charger l'interface: ${errorDescription}`);
    });
    
    // G√©rer le chargement r√©ussi
    mainWindow.webContents.on('did-finish-load', () => {
        console.log('‚úÖ Interface charg√©e avec succ√®s');
    });
    
    // G√©rer le d√©but du chargement
    mainWindow.webContents.on('did-start-loading', () => {
        console.log('üîÑ D√©but du chargement de l\'interface...');
    });
    
    // G√©rer les erreurs de navigation
    mainWindow.webContents.on('did-fail-provisional-load', (event, errorCode, errorDescription, validatedURL) => {
        console.error('‚ùå Erreur de navigation:', errorCode, errorDescription, validatedURL);
    });

    // Ouvrir les DevTools en mode d√©veloppement
    if (process.env.NODE_ENV === 'development') {
        mainWindow.webContents.openDevTools();
    }

    // √âmis quand la fen√™tre est ferm√©e
    mainWindow.on('closed', () => {
        mainWindow = null;
        if (serverProcess) {
            serverProcess.kill();
        }
    });
    
    // S'assurer que la fen√™tre reste visible
    mainWindow.on('hide', () => {
        console.log('ü™ü Fen√™tre masqu√©e, la remettre au premier plan...');
        mainWindow.show();
        mainWindow.focus();
    });
    
    // G√©rer l'activation de l'application
    mainWindow.on('focus', () => {
        console.log('üéØ Fen√™tre focalis√©e');
    });

    // G√©rer les liens externes
    mainWindow.webContents.setWindowOpenHandler(({ url }) => {
        shell.openExternal(url);
        return { action: 'deny' };
    });
}

// Cr√©er le menu de l'application
function createMenu() {
    const template = [
        {
            label: 'SEIA Translator',
            submenu: [
                {
                    label: 'About SEIA Translator',
                    click: () => {
                        dialog.showMessageBox(mainWindow, {
                            type: 'info',
                            title: 'About',
                            message: 'SEIA Translator',
                            detail: 'Video transcription and translation with subtitles\nVersion 1.0.0'
                        });
                    }
                },
                { type: 'separator' },
                { role: 'hide' },
                { role: 'hideothers' },
                { role: 'unhide' },
                { type: 'separator' },
                { role: 'quit' }
            ]
        },
        {
            label: 'File',
            submenu: [
                {
                    label: 'Open Video',
                    accelerator: 'CmdOrCtrl+O',
                    click: () => {
                        mainWindow.webContents.executeJavaScript(`
                            document.getElementById('videoFile').click();
                        `);
                    }
                },
                { type: 'separator' },
                { role: 'close' }
            ]
        },
        {
            label: 'Edit',
            submenu: [
                { role: 'undo' },
                { role: 'redo' },
                { type: 'separator' },
                { role: 'cut' },
                { role: 'copy' },
                { role: 'paste' },
                { role: 'selectall' }
            ]
        },
        {
            label: 'View',
            submenu: [
                { role: 'reload' },
                { role: 'forceReload' },
                { role: 'toggleDevTools' },
                { type: 'separator' },
                { role: 'resetZoom' },
                { role: 'zoomIn' },
                { role: 'zoomOut' },
                { type: 'separator' },
                { role: 'togglefullscreen' }
            ]
        },
        {
            label: 'Window',
            submenu: [
                { role: 'minimize' },
                { role: 'close' }
            ]
        }
    ];

    const menu = Menu.buildFromTemplate(template);
    Menu.setApplicationMenu(menu);
}

// Quand l'application est pr√™te
app.whenReady().then(() => {
    console.log('üéâ Application pr√™te !');
    
    // D√©marrer le serveur
    startServer();
    
    // Attendre un peu que le serveur d√©marre
    setTimeout(() => {
        // Cr√©er la fen√™tre
        createWindow();
        
        // Cr√©er le menu
        createMenu();
        
        console.log('‚úÖ Application initialis√©e avec succ√®s !');
    }, 2000);
});

// Quitter quand toutes les fen√™tres sont ferm√©es
app.on('window-all-closed', () => {
    console.log('üî¥ Toutes les fen√™tres ferm√©es');
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

// Activer l'application quand on clique sur l'ic√¥ne du dock
app.on('activate', () => {
    console.log('üéØ Application activ√©e');
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    } else {
        mainWindow.show();
        mainWindow.focus();
    }
});

// G√©rer les erreurs non captur√©es
process.on('uncaughtException', (error) => {
    console.error('‚ùå Erreur non captur√©e:', error);
    dialog.showErrorBox('Erreur critique', `Une erreur critique s'est produite: ${error.message}`);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Promesse rejet√©e non g√©r√©e:', reason);
    dialog.showErrorBox('Erreur critique', `Une promesse a √©t√© rejet√©e: ${reason}`);
});
